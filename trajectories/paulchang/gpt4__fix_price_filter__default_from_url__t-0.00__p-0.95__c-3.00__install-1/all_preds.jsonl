{"model_name_or_path": "gpt4__fix_price_filter__default_from_url__t-0.00__p-0.95__c-3.00__install-1", "instance_id": "279fc8", "model_patch": "\ndiff --git a/src/components/dashboard/recent-sales.tsx b/src/components/dashboard/recent-sales.tsx\nindex 6c400e5..2f4e974 100644\n--- a/src/components/dashboard/recent-sales.tsx\n+++ b/src/components/dashboard/recent-sales.tsx\n@@ -127,20 +127,19 @@ export const useRecentSales = (): RecentSale[] => {\n   const searchParams = useSearchParams();\n   const value = searchParams.get(\"price\");\n \n-  return MOCK_DATA.filter((sale) => {\n-    if (value) {\n-      if (value === \"high\") {\n-        return sale.avatar === \"OM\";\n-      }\n-      if (value === \"med\") {\n-        return sale.avatar === \"IN\";\n-      }\n-      return (\n-        sale.avatar === \"JL\" || sale.avatar === \"WK\" || sale.avatar === \"SD\"\n-      );\n-    }\n-\n-    return true;\n+        return MOCK_DATA.filter((sale) => {\n+            if (value) {\n+                const saleAmount = parseFloat(sale.amount.replace(/[^0-9.-]+/g, \"\"));\n+                if (value === \"high\") {\n+                    return saleAmount > 1000;\n+                }\n+                if (value === \"med\") {\n+                    return saleAmount <= 1000 && saleAmount > 500;\n+                }\n+                return saleAmount <= 500;\n+            }\n+            return true;\n+        });\n   });\n };\n \ndiff --git a/test-filter.js b/test-filter.js\nnew file mode 100644\nindex 0000000..8c3aad9\n--- /dev/null\n+++ b/test-filter.js\n@@ -0,0 +1,52 @@\n+const { useRecentSales } = require('./src/components/dashboard/recent-sales');\n+\n+// Mock the useSearchParams hook to simulate different filter values\n+const useSearchParams = () => {\n+  return {\n+    get: (param) => {\n+      if (param === 'price') {\n+        // Simulate different price filter values\n+        return 'high'; // Change this value to 'med' or 'low' to test different filters\n+      }\n+      return null;\n+    },\n+  };\n+};\n+\n+// Mock the data for testing\n+const MOCK_DATA = [\n+  {\n+    avatar: \"OM\",\n+    email: \"olivia.martin@email.com\",\n+    name: \"Olivia Martin\",\n+    amount: \"+$1,999.00\",\n+    transactions: [],\n+  },\n+  {\n+    avatar: \"IN\",\n+    email: \"isabella.nguyen@email.com\",\n+    name: \"Isabella Nguyen\",\n+    amount: \"+$600.00\",\n+    transactions: [],\n+  },\n+  {\n+    avatar: \"WK\",\n+    email: \"william.kim@email.com\",\n+    name: \"William Kim\",\n+    amount: \"+$99.00\",\n+    transactions: [],\n+  },\n+  {\n+    avatar: \"SD\",\n+    email: \"sofia.davis@email.com\",\n+    name: \"Sofia Davis\",\n+    amount: \"+$39.00\",\n+    transactions: [],\n+  },\n+];\n+\n+// Override the useRecentSales function to use the mock searchParams and data\n+const filteredSales = useRecentSales(MOCK_DATA, useSearchParams);\n+\n+console.log('Filtered Sales:', filteredSales);\n+\ndiff --git a/test_filter.py b/test_filter.py\nnew file mode 100644\nindex 0000000..cbefd5e\n--- /dev/null\n+++ b/test_filter.py\n@@ -0,0 +1,36 @@\n+import re\n+\n+# Mock data similar to the MOCK_DATA in the recent-sales.tsx file\n+mock_data = [\n+    {\"avatar\": \"OM\", \"email\": \"olivia.martin@email.com\", \"name\": \"Olivia Martin\", \"amount\": \"+$1,999.00\"},\n+    {\"avatar\": \"IN\", \"email\": \"isabella.nguyen@email.com\", \"name\": \"Isabella Nguyen\", \"amount\": \"+$600.00\"},\n+    {\"avatar\": \"WK\", \"email\": \"william.kim@email.com\", \"name\": \"William Kim\", \"amount\": \"+$99.00\"},\n+    {\"avatar\": \"SD\", \"email\": \"sofia.davis@email.com\", \"name\": \"Sofia Davis\", \"amount\": \"+$39.00\"},\n+]\n+\n+# Simulated filter values\n+filter_values = [\"high\", \"med\", \"low\"]\n+\n+# Function to filter sales based on the amount\n+def filter_sales(data, filter_value):\n+    filtered_sales = []\n+    for sale in data:\n+        # Remove currency symbol and commas, convert to float\n+        sale_amount = float(re.sub(r'[^\\d.]', '', sale[\"amount\"]))\n+        if filter_value == \"high\":\n+            if sale_amount > 1000:\n+                filtered_sales.append(sale)\n+        elif filter_value == \"med\":\n+            if 500 < sale_amount <= 1000:\n+                filtered_sales.append(sale)\n+        elif filter_value == \"low\":\n+            if sale_amount <= 500:\n+                filtered_sales.append(sale)\n+    return filtered_sales\n+\n+# Test the filter logic with different filter values\n+for value in filter_values:\n+    print(f\"Filtering with value '{value}':\")\n+    print(filter_sales(mock_data, value))\n+    print()\n+\n"}
